import os
import json
import pandas as pd
import matplotlib.pyplot as plt
from datetime import datetime, timedelta
import numpy as np

# Create directory for visualizations if it doesn't exist
os.makedirs('data/visualizations', exist_ok=True)

def load_data():
    """Load the data generated by the monitoring script"""
    print("Loading monitoring data...")
    
    data = {
        'news': None,
        'facebook': None,
        'twitter': None,
        'member_mentions': None,
        'topic_mentions': None,
        'alerts': None,
        'sentiment_trends': None
    }
    
    # Check if files exist and load them
    if os.path.exists('data/news/news_data.json'):
        with open('data/news/news_data.json', 'r') as f:
            data['news'] = json.load(f)
    
    if os.path.exists('data/facebook/facebook_data.json'):
        with open('data/facebook/facebook_data.json', 'r') as f:
            data['facebook'] = json.load(f)
    
    if os.path.exists('data/twitter/twitter_data.json'):
        with open('data/twitter/twitter_data.json', 'r') as f:
            data['twitter'] = json.load(f)
    
    if os.path.exists('data/member_mentions.json'):
        with open('data/member_mentions.json', 'r') as f:
            data['member_mentions'] = json.load(f)
    
    if os.path.exists('data/topic_mentions.json'):
        with open('data/topic_mentions.json', 'r') as f:
            data['topic_mentions'] = json.load(f)
    
    if os.path.exists('data/alerts.json'):
        with open('data/alerts.json', 'r') as f:
            data['alerts'] = json.load(f)
    
    if os.path.exists('data/sentiment_trends.json'):
        with open('data/sentiment_trends.json', 'r') as f:
            data['sentiment_trends'] = json.load(f)
    
    return data

def generate_member_profiles(data):
    """Generate detailed profiles for each parliament member"""
    print("Generating member profiles...")
    
    if not data['member_mentions']:
        print("No member mentions data available.")
        return
    
    member_profiles = []
    
    for member_name, mentions in data['member_mentions'].items():
        # Get recent mentions from different sources
        recent_mentions = []
        
        # Add news mentions
        if data['news']:
            news_mentions = [item for item in data['news'] if item['member'] == member_name]
            news_mentions.sort(key=lambda x: x['date'], reverse=True)
            for mention in news_mentions[:3]:
                recent_mentions.append({
                    'id': len(recent_mentions) + 1,
                    'source': 'news',
                    'title': mention['title'],
                    'snippet': mention['content'][:150] + '...',
                    'url': mention['url'],
                    'date': mention['date'].split()[0],
                    'sentiment': 'positive' if mention['sentiment'] > 0.6 else 'neutral' if mention['sentiment'] > 0.4 else 'negative'
                })
        
        # Add Facebook mentions
        if data['facebook']:
            fb_mentions = [post for post in data['facebook'] if post['member'] == member_name]
            fb_mentions.sort(key=lambda x: x['date'], reverse=True)
            for mention in fb_mentions[:2]:
                recent_mentions.append({
                    'id': len(recent_mentions) + 1,
                    'source': 'facebook',
                    'title': f"Facebook post about {mention['topic']}",
                    'snippet': mention['content'][:150] + '...',
                    'url': mention['url'],
                    'date': mention['date'].split()[0],
                    'sentiment': 'positive' if mention['sentiment'] > 0.6 else 'neutral' if mention['sentiment'] > 0.4 else 'negative'
                })
        
        # Add Twitter mentions
        if data['twitter']:
            twitter_mentions = [tweet for tweet in data['twitter'] if tweet['member'] == member_name]
            twitter_mentions.sort(key=lambda x: x['date'], reverse=True)
            for mention in twitter_mentions[:2]:
                recent_mentions.append({
                    'id': len(recent_mentions) + 1,
                    'source': 'twitter',
                    'title': f"Tweet about {mention['topic']}",
                    'snippet': mention['content'],
                    'url': mention['url'],
                    'date': mention['date'].split()[0],
                    'sentiment': 'positive' if mention['sentiment'] > 0.6 else 'neutral' if mention['sentiment'] > 0.4 else 'negative'
                })
        
        # Sort all mentions by date
        recent_mentions.sort(key=lambda x: x['date'], reverse=True)
        
        # Determine trend (up or down)
        trend = "up" if mentions['sentiment']['overall'] > 0.5 else "down"
        
        # Create member profile
        profile = {
            'id': len(member_profiles) + 1,
            'name': member_name,
            'position': 'Chairman of the Parliament' if 'AMARBAYASGALAN' in member_name else 
                       'Deputy Chairman' if 'BULGANTUYA' in member_name else 'Member',
            'committee': get_committee_for_member(member_name),
            'image': f"https://www.parliament.mn/images/members/{member_name.split()[-1].lower()}.jpg",
            'sentiment': {
                'current': mentions['sentiment']['overall'],
                'previous': max(0, min(1, mentions['sentiment']['overall'] + (0.1 if mentions['sentiment']['overall'] < 0.5 else -0.1))),
                'trend': trend
            },
            'mentions': {
                'total': mentions['total'],
                'news': mentions['news'],
                'facebook': mentions['facebook'],
                'twitter': mentions['twitter']
            },
            'recentMentions': recent_mentions
        }
        
        member_profiles.append(profile)
    
    # Save the member profiles to a JSON file
    with open('data/member_profiles.json', 'w') as f:
        json.dump(member_profiles, f, indent=2)
    
    print(f"Generated profiles for {len(member_profiles)} parliament members")
    return member_profiles

def get_committee_for_member(member_name):
    """Assign a committee to a member based on their name"""
    committees = {
        "AMARBAYASGALAN": "State Structure",
        "BULGANTUYA": "Education and Culture",
        "ALTANKHUYAG": "Budget",
        "AMARSAIKHAN": "Security and Foreign Policy",
        "AUBAKIR": "Environment and Agriculture",
        "BAT-AMGALAN": "Innovation and E-Policy",
        "BAT-ERDENE": "Ethics and Disciplinary",
        "BATJARGAL": "Social Policy"
    }
    
    for surname, committee in committees.items():
        if surname in member_name:
            return committee
    
    return "General Committee"

def generate_visualizations(data):
    """Generate visualizations for the dashboard"""
    print("Generating visualizations...")
    
    # 1. Overall sentiment by platform
    if data['sentiment_trends']:
        plt.figure(figsize=(10, 6))
        
        dates = [item['date'] for item in data['sentiment_trends']]
        overall = [item['overall'] * 100 for item in data['sentiment_trends']]
        news = [item['news'] * 100 for item in data['sentiment_trends']]
        facebook = [item['facebook'] * 100 for item in data['sentiment_trends']]
        twitter = [item['twitter'] * 100 for item in data['sentiment_trends']]
        
        plt.plot(dates, overall, 'o-', label='Overall', linewidth=2)
        plt.plot(dates, news, 's-', label='News')
        plt.plot(dates, facebook, '^-', label='Facebook')
        plt.plot(dates, twitter, 'd-', label='Twitter')
        
        plt.title('Sentiment Trend by Platform')
        plt.xlabel('Date')
        plt.ylabel('Sentiment Score (%)')
        plt.ylim(30, 80)
        plt.grid(True, linestyle='--', alpha=0.7)
        plt.legend()
        plt.tight_layout()
        
        plt.savefig('data/visualizations/sentiment_trend.png')
        plt.close()
    
    # 2. Member mentions comparison
    if data['member_mentions']:
        plt.figure(figsize=(12, 8))
        
        members = list(data['member_mentions'].keys())
        total_mentions = [data['member_mentions'][m]['total'] for m in members]
        sentiment = [data['member_mentions'][m]['sentiment']['overall'] * 100 for m in members]
        
        # Sort by total mentions
        sorted_indices = np.argsort(total_mentions)[::-1]
        members = [members[i] for i in sorted_indices]
        total_mentions = [total_mentions[i] for i in sorted_indices]
        sentiment = [sentiment[i] for i in sorted_indices]
        
        # Use last names only for display
        display_names = [m.split()[-1] for m in members]
        
        fig, ax1 = plt.subplots(figsize=(12, 8))
        
        # Plot mentions as bars
        bars = ax1.barh(display_names, total_mentions, color='skyblue')
        ax1.set_xlabel('Total Mentions')
        ax1.set_ylabel('Parliament Member')
        ax1.set_title('Parliament Members: Mentions and Sentiment')
        
        # Plot sentiment as points
        ax2 = ax1.twiny()
        ax2.plot(sentiment, display_names, 'ro', markersize=8)
        ax2.set_xlabel('Sentiment Score (%)')
        ax2.set_xlim(0, 100)
        
        # Add a legend
        from matplotlib.lines import Line2D
        legend_elements = [
            Line2D([0], [0], color='skyblue', lw=4, label='Mentions'),
            Line2D([0], [0], marker='o', color='r', label='Sentiment', markersize=8, linestyle='None')
        ]
        ax1.legend(handles=legend_elements, loc='lower right')
        
        plt.tight_layout()
        plt.savefig('data/visualizations/member_comparison.png')
        plt.close()
    
    # 3. Topic distribution
    if data['topic_mentions']:
        plt.figure(figsize=(10, 8))
        
        topics = list(data['topic_mentions'].keys())
        counts = [data['topic_mentions'][t]['total'] for t in topics]
        sentiment = [data['topic_mentions'][t]['sentiment']['overall'] for t in topics]
        
        # Sort by count
        sorted_indices = np.argsort(counts)[::-1]
        topics = [topics[i] for i in sorted_indices]
        counts = [counts[i] for i in sorted_indices]
        sentiment = [sentiment[i] for i in sorted_indices]
        
        # Create colors based on sentiment
        colors = ['green' if s > 0.6 else 'gold' if s > 0.4 else 'red' for s in sentiment]
        
        plt.pie(counts, labels=topics, autopct='%1.1f%%', startangle=90, colors=colors)
        plt.axis('equal')
        plt.title('Topic Distribution')
        plt.tight_layout()
        
        plt.savefig('data/visualizations/topic_distribution.png')
        plt.close()
    
    # 4. Platform distribution
    if data['news'] and data['facebook'] and data['twitter']:
        plt.figure(figsize=(8, 8))
        
        platforms = ['News', 'Facebook', 'Twitter']
        counts = [len(data['news']), len(data['facebook']), len(data['twitter'])]
        colors = ['#36A2EB', '#9966FF', '#FF9F40']
        
        plt.pie(counts, labels=platforms, autopct='%1.1f%%', startangle=90, colors=colors)
        plt.axis('equal')
        plt.title('Content Distribution by Platform')
        plt.tight_layout()
        
        plt.savefig('data/visualizations/platform_distribution.png')
        plt.close()
    
    print("Visualizations generated successfully")

def prepare_dashboard_data():
    """Prepare and format data for the dashboard"""
    print("Preparing dashboard data...")
    
    # Load the data
    data = load_data()
    
    # Check if data is available
    if not all([data['news'], data['facebook'], data['twitter']]):
        print("Running monitoring script to generate data...")
        import monitor
        monitor.run_monitoring()
        
        # Reload the data
        data = load_data()
    
    # Generate member profiles
    member_profiles = generate_member_profiles(data)
    
    # Generate visualizations
    generate_visualizations(data)
    
    # Copy data to the dashboard's public directory
    os.makedirs('public/data', exist_ok=True)
    
    # Copy member profiles
    with open('public/data/members.json', 'w') as f:
        json.dump(member_profiles, f, indent=2)
    
    # Copy sentiment trends
    if data['sentiment_trends']:
        with open('public/data/sentiment_trends.json', 'w') as f:
            json.dump(data['sentiment_trends'], f, indent=2)
    
    # Copy alerts
    if data['alerts']:
        with open('public/data/alerts.json', 'w') as f:
            json.dump(data['alerts'], f, indent=2)
    
    print("Dashboard data prepared successfully")

if __name__ == "__main__":
    prepare_dashboard_data()
